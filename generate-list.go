//go:build ignore

package main

import (
	"fmt"
	"github.com/cristalhq/dsvreader"
	"log"
	"os"
)

func main() {
	if len(os.Args) != 3 {
		log.Fatalln("usage: wordlist <in> <out>")
	}
	in := os.Args[1]
	out := os.Args[2]
	f, err := os.Open(in)
	if err != nil {
		log.Fatalln(err)
	}
	words := make([]string, 0, 1024)
	reader := dsvreader.NewTSV(f)
	header := true
	for reader.Next() {
		_ = reader.String()
		_ = reader.String()
		_ = reader.String()
		var word string
		w := reader.String()
		if w != "" {
			word = w
		}
		w = reader.String()
		if w != "" {
			word = w
		}
		w = reader.String()
		if w != "" {
			word = w
		}
		_ = reader.String()
		if header {
			header = false
			continue
		}
		if word != "" {
			words = append(words, word)
		}
	}
	if reader.Error() != nil {
		log.Fatalln(reader.Error())
	}

	of, err := os.Create(out)
	if err != nil {
		log.Fatalln(err)
	}
	_, _ = fmt.Fprintf(of, "package words\n\n// Code generated by generate-list.go; DO NOT EDIT.\n\nconst listSize = %d\n// List is the list of words used to encode values\nvar List = []string{\n", len(words))
	for i, v := range words {
		_, _ = fmt.Fprintf(of, "  \"%s\", // %d\n", v, i)
	}
	_, _ = fmt.Fprintf(of, "}\n")
}
